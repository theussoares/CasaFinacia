import { useSessionStore } from '~/stores/session';

export default defineNuxtRouteMiddleware((to) => {
    // **PERF-01**: Cache eterno de autentica√ß√£o - verifica localStorage primeiro
    const hasEternalCache = () => {
        if (process.server) return false;
        try {
            return localStorage.getItem('user-auth-eternal') === 'true';
        } catch {
            return false;
        }
    };

    // **PERF-02**: No servidor, estrat√©gia otimizada sem redirecionamentos agressivos
    if (process.server) {
        const sessionCookie = useCookie('session-token', { 
            maxAge: 60 * 60 * 24 * 7, // 7 dias
            sameSite: 'lax',
            secure: true 
        });
        
        // **LAYOUT-SHIFT-FIX**: S√≥ redireciona se realmente necess√°rio
        // Se tem cache eterno, permite acesso direto √† home
        if (to.path === '/home') {
            // Permite acesso direto √† home - verifica√ß√£o ser√° feita no cliente
            return;
        }
        
        // Se n√£o h√° cookie E n√£o tem cache eterno E tenta acessar p√°gina protegida
        if (!sessionCookie.value && to.path !== '/' && to.path !== '/convite') {
            return navigateTo('/');
        }
        
        // Se tem cookie e tenta acessar login, redireciona
        if (sessionCookie.value && to.path === '/') {
            return navigateTo('/home');
        }
        
        return; // Permite que SSR continue
    }

    // **PERF-03**: No cliente, estrat√©gia n√£o-bloqueante
    const sessionStore = useSessionStore();

    console.log('üîç Middleware auth - Rota:', to.path);
    console.log('üîç Auth ready:', sessionStore.isAuthReady);
    console.log('üîç User logado:', !!sessionStore.user);
    console.log('üîç Cache eterno:', hasEternalCache());

    // **LAYOUT-SHIFT-FIX**: Se est√° indo para home e tem cache eterno, permite
    if (to.path === '/home' && hasEternalCache()) {
        console.log('‚úÖ Acesso direto √† home com cache eterno');
        // **DEBUG**: Verifica se a store j√° tem dados
        if (sessionStore.user) {
            console.log('‚úÖ Store j√° possui dados do usu√°rio:', {
                name: sessionStore.user.name,
                photoURL: sessionStore.user.photoURL ? 'PRESENTE' : 'AUSENTE'
            });
        } else {
            console.log('‚ö†Ô∏è Cache eterno presente mas store vazia - dados ser√£o carregados pelo plugin');
        }
        return;
    }

    // **PERF-04**: S√≥ redireciona ap√≥s auth estar pronto
    if (!sessionStore.isAuthReady) {
        console.log('‚è≥ Auth n√£o pronto, permitindo navega√ß√£o...');
        return;
    }

    // Se o utilizador est√° logado E tenta aceder √† p√°gina de login
    if (sessionStore.user && to.path === '/') {
        console.log('üîÑ Usu√°rio logado tentando acessar login, redirecionando para /home');
        return navigateTo('/home');
    }

    // Se o utilizador N√ÉO est√° logado E tenta aceder a uma p√°gina protegida
    if (!sessionStore.user && to.path !== '/' && to.path !== '/convite') {
        console.log('üîÑ Usu√°rio n√£o logado tentando acessar p√°gina protegida, redirecionando para /');
        return navigateTo('/');
    }

    console.log('‚úÖ Middleware auth - passando pela rota');
});